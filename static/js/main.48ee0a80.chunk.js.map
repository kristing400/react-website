{"version":3,"sources":["assets/resume.pdf","serviceWorker.js","components/Header.jsx","components/SocialNavBar.jsx","Navigation.jsx","index.js","components/Gallery.jsx"],"names":["module","exports","Boolean","window","location","hostname","match","Header","style","containerStyle","titleStyle","navContainerStyle","navItemStyle","href","Pdf","rel","target","selectedNavStyle","paddingBottom","borderBottomColor","borderBottomWidth","borderBottomStyle","paddingLeft","paddingRight","paddingTop","fontSize","display","justifyContent","fontFamily","fontWeight","textAlign","letterSpacing","color","SocialNavBar","transform","transformOrigin","position","left","marginTop","marginLeft","marginRight","Navigation","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,oC,oJCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BChBS,SAASC,IACpB,OACI,oCACI,4BAAQC,MAAOC,GACX,wBAAID,MAAOE,GAAX,eACA,yBAAKF,MAAOG,GACR,yBAAKH,MAAOI,GACR,uBAAGC,KAAMC,IAAKC,IAAI,sBAAsBC,OAAO,UAA/C,WAEJ,yBAAKR,MAAOI,GACR,uBAAGJ,MAAOS,EAAkBJ,KAAK,KAAjC,eAEJ,yBAAKL,MAAOI,GACR,uBAAGC,KAAK,KAAR,oBAEJ,yBAAKL,MAAOI,GACR,uBAAGC,KAAK,KAAR,gBACJ,yBAAKL,MAAOI,GACR,uBAAGC,KAAK,KAAR,kBAGZ,8BAKZ,IAAMI,EAAmB,CACrBC,cAAe,MACfC,kBAAmB,UACnBC,kBAAmB,MACnBC,kBAAmB,SAGjBT,EAAe,CACjBU,YAAa,OACbC,aAAc,QAGZZ,EAAoB,CACtBa,WAAY,OACZN,cAAe,OACfO,SAAU,OACVC,QAAS,OACTC,eAAgB,UAGdlB,EAAiB,CACnBe,WAAY,OACZN,cAAe,QAGbR,EAAa,CACfkB,WAAY,kBACZH,SAAU,OACVI,WAAY,SACZC,UAAW,SACXC,cAAe,QACfC,MAAO,WCzDI,SAASC,IACpB,OACI,oCACI,yBAAKzB,MAAOC,GACR,yBAAKD,MAAOI,GACR,uBAAGI,OAAO,SAASD,IAAI,sBAAsBF,KAAK,0CAAlD,cAEJ,yBAAKL,MAAOI,GACR,uBAAGI,OAAO,SAASD,IAAI,sBAAsBF,KAAK,sDAAlD,aAEJ,yBAAKL,MAAOI,GACR,uBAAGI,OAAO,SAASD,IAAI,sBAAsBF,KAAK,kCAAlD,aAOpB,IAAMJ,EAAiB,CACnByB,UAAW,mCACXC,gBAAiB,YACjBC,SAAU,QACVC,KAAM,EACNX,QAAS,OACTY,UAAW,QACXC,WAAY,OACZC,YAAa,OACbf,SAAU,QAGRb,EAAe,CACjBU,YAAa,OACbC,aAAc,QC9BH,SAASkB,IACtB,OACE,yBAAKjC,MAAOC,GACV,kBAACwB,EAAD,MACA,kBAAC1B,EAAD,OAKN,IAAME,EAAiB,CACrBc,aAAc,QACdD,YAAa,SCLfoB,IAASC,OACP,kBAAC,IAAD,KACE,kBAACF,EAAD,MACA,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAIC,UCXX,WACX,OACI,yCDYNC,SAASC,eAAe,SJmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.48ee0a80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/resume.b253da65.pdf\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport Pdf from '../assets/resume.pdf';\nexport default function Header() {\n    return (\n        <>\n            <header style={containerStyle}>\n                <h1 style={titleStyle}>Kristin Yin</h1>\n                <div style={navContainerStyle}>\n                    <div style={navItemStyle}>\n                        <a href={Pdf} rel=\"noopener noreferrer\" target=\"_blank\">resume</a>\n                    </div>\n                    <div style={navItemStyle}>\n                        <a style={selectedNavStyle} href=\"#\">hackathons</a>\n                    </div>\n                    <div style={navItemStyle}>\n                        <a href=\"#\">interactive art</a>\n                    </div>\n                    <div style={navItemStyle}>\n                        <a href=\"#\">mixed media</a></div>\n                    <div style={navItemStyle}>\n                        <a href=\"#\">watercolors</a></div>\n                </div>\n            </header>\n            <hr />\n        </>\n    );\n}\n\nconst selectedNavStyle = {\n    paddingBottom: '8px',\n    borderBottomColor: '#94C5CC',\n    borderBottomWidth: '2px',\n    borderBottomStyle: \"solid\",\n}\n\nconst navItemStyle = {\n    paddingLeft: '32px',\n    paddingRight: '32px',\n}\n\nconst navContainerStyle = {\n    paddingTop: '24px',\n    paddingBottom: '24px',\n    fontSize: '18px',\n    display: 'flex',\n    justifyContent: 'center'\n}\n\nconst containerStyle = {\n    paddingTop: '56px',\n    paddingBottom: '32px',\n};\n\nconst titleStyle = {\n    fontFamily: \"Julius Sans One\",\n    fontSize: \"36px\",\n    fontWeight: \"normal\",\n    textAlign: \"center\",\n    letterSpacing: \"0.1em\",\n    color: \"#000100\"\n}","import React from 'react';\n\nexport default function SocialNavBar() {\n    return (\n        <>\n            <div style={containerStyle}>\n                <div style={navItemStyle}>\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.instagram.com/_kristinyin_\">instagram</a>\n                </div>\n                <div style={navItemStyle}>\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/kristin-yin-347b60110/\">linkedin</a>\n                </div>\n                <div style={navItemStyle}>\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/kristing400\">github</a>\n                </div>\n            </div>\n        </>\n    );\n}\n\nconst containerStyle = {\n    transform: 'rotate(-90deg) translateX(-100%)',\n    transformOrigin: 'left top ',\n    position: 'fixed',\n    left: 0,\n    display: 'flex',\n    marginTop: '245px',\n    marginLeft: '40px',\n    marginRight: '40px',\n    fontSize: '18px'\n}\n\nconst navItemStyle = {\n    paddingLeft: '32px',\n    paddingRight: '32px',\n}\n","import React from 'react';\nimport Header from './components/Header';\nimport SocialNavBar from './components/SocialNavBar';\n\nexport default function Navigation() {\n  return (\n    <div style={containerStyle}>\n      <SocialNavBar />\n      <Header />\n    </div>\n  );\n}\n\nconst containerStyle = {\n  paddingRight: '144px',\n  paddingLeft: '144px'\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from \"react-router-dom\"; import * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport Navigation from './Navigation';\nimport Gallery from './components/Gallery';\n\nReactDOM.render(\n  <Router>\n    <Navigation />\n    <Route exact path='/' component={Gallery}>\n    </Route>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nexport default function Gallery() {\n    return (\n        <>\n\n        </>\n    );\n}"],"sourceRoot":""}